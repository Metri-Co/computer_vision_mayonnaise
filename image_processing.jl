#%%
# Function for processing the images
function img_process(df, filepath, file_ext, s_element,
	algorithm, level_x = 1, level_y = 255, step = 10, degree = 0, n_samples = 1)
	samples = zeros(Int, n_samples, 1)
	for i = 1:n_samples
		n = df[i,1]
		samples[i,1] = n
	end
	array = zeros(n_samples, 56) # 55 features + first column with sample ID
	# Initialize feature extraction and indexing in array
	for i = 1:n_samples
		println("Segmentation and conversion colors of image $(i)\n")
		name = string(Int((samples[i,1])))
		img = load(filepath*name*"."*file_ext) #adjust the extension file if needed
		mask = create_mask(img, algorithm, s_element)
		img_rgb = superimpose(img, mask) # RGB image
		img_hsv = HSV.(img_rgb) # Conversion to HSV color space
		img_lab = Lab.(img_rgb) # Conversion to Lab color space
		array[i, 1] = samples[i,1]
		println("Starting the feature extraction of image $(i)\n")
		###### Extraction of background and samplpe gray levels
		array[i, 2] = mean_gsample(img, mask)
		array[i, 3] = mean_bkg(img, mask)
		print("Gray levels features extraction completed\n")
		###### RGB Features Extraction ##### (img, low_limit_threshold, img_component, channel)
		array[i, 4] = mean_rgb(img_rgb, "red")
		array[i, 5] = mean_rgb(img_rgb, "green")
		array[i, 6] = mean_rgb(img_rgb, "blue")
		array[i, 7] = standard_dev_rgb(img_rgb, "red")
		array[i, 8] = standard_dev_rgb(img_rgb, "green")
		array[i, 9] = standard_dev_rgb(img_rgb, "blue")
		array[i, 10] = min_rgb(img_rgb, "red")
		array[i, 11] = min_rgb(img_rgb, "green")
		array[i, 12] = min_rgb(img_rgb, "blue")
		array[i, 13] = max_rgb(img_rgb, "red")
		array[i, 14] = max_rgb(img_rgb, "green")
		array[i, 15] = max_rgb(img_rgb, "blue")
		array[i, 16] = skewness(img_rgb, "red")
		array[i, 17] = skewness(img_rgb, "blue")
		array[i, 18] = skewness(img_rgb, "green")
		array[i, 19] = kurtosis(img_rgb, "red")
		array[i, 20] = kurtosis(img_rgb, "blue")
		array[i, 21] = kurtosis(img_rgb, "green")
		print("RGB feature extraction completed\n")
		###### Extraction of yellow levels
		array[i, 22] = mean_yellow(img_rgb)
		array[i, 23] = std_yellow(img_rgb)
		array[i, 24] = min_yellow(img_rgb)
		array[i, 25] = max_yellow(img_rgb)
		print("Yellow features extraction completed\n")
		###### HSV Features Extraction ##### (img, low_limit_threshold, up_limit_threshold, img_component, channel)
		array[i, 26] = mean_hsv(img_hsv, "hue")
		array[i, 27] = mean_hsv(img_hsv, "saturation")
		array[i, 28] = mean_hsv(img_hsv, "value")
		array[i, 29] = standard_dev_hsv(img_hsv, "hue")
		array[i, 30] = standard_dev_hsv(img_hsv, "saturation")
		array[i, 31] = standard_dev_hsv(img_hsv, "value")
		array[i, 32] = min_hsv(img_hsv, "hue")
		array[i, 33] = min_hsv(img_hsv, "saturation")
		array[i, 34] = min_hsv(img_hsv, "value")
		array[i, 35] = max_hsv(img_hsv, "hue")
		array[i, 36] = max_hsv(img_hsv, "saturation")
		array[i, 37] = max_hsv(img_hsv, "value")
		array[i, 38] = skewness(img_hsv, "hue")
		array[i, 39] = skewness(img_hsv, "saturation")
		array[i, 40] = skewness(img_hsv, "value")
		array[i, 41] = kurtosis(img_hsv, "hue")
		array[i, 42] = kurtosis(img_hsv, "saturation")
		array[i, 43] = kurtosis(img_hsv, "value")
		print("HSV feature extraction completed\n")
		##### Lab Features Extraction ####### (img, low_limit_threshold, up_limit_threshold, img_component, channel)
		array[i, 44] = mean_lab(img_lab, "luminosity")
		array[i, 45] = mean_lab(img_lab, "a")
		array[i, 46] = mean_lab(img_lab, "b")
		array[i, 47] = standard_dev_lab(img_lab, "luminosity")
		array[i, 48] = standard_dev_lab(img_lab, "a")
		array[i, 49] = standard_dev_lab(img_lab, "b")
		array[i, 50] = min_lab(img_lab, "luminosity")
		array[i, 51] = min_lab(img_lab, "a")
		array[i, 52] = min_lab(img_lab, "b")
		array[i, 53] = max_lab(img_lab, "luminosity")
		array[i, 54] = max_lab(img_lab, "a")
		array[i, 55] = max_lab(img_lab, "b")
		array[i, 56] = skewness(img_lab, "luminosity")
		array[i, 57] = skewness(img_lab, "a")
		array[i, 58] = skewness(img_lab, "b")
		array[i, 59] = kurtosis(img_lab, "luminosity")
		array[i, 60] = kurtosis(img_lab, "a")
		array[i, 61] = kurtosis(img_lab, "b")
		print("Lab feature extraction completed\n")
		###### Haralick Features Extraction ##############
		co_ocur_mat = GLCM(img_rgb, level_x, level_y, step, degree)
		norm_mat = normalized_GLCM(co_ocur_mat)
		array[i, 62] = autocorr(norm_mat)
		array[i, 63] = cluster_prom(norm_mat)
		array[i, 64] = cluster_shade(norm_mat)
		array[i, 65] = corr(norm_mat)
		array[i, 66] = contrast(norm_mat)
		array[i, 67] = disimilarity(norm_mat)
		array[i, 68] = energy(norm_mat)
		array[i, 69] = entropy(norm_mat)
		array[i, 70] = entropy_diff(norm_mat)
		array[i, 71] = variance_diff(norm_mat)
		array[i, 72] = homogeneity(norm_mat)
		array[i, 73] = meas_corr_1(norm_mat)
		array[i, 74] = meas_corr_2(norm_mat)
		array[i, 75] = inv_diff(norm_mat)
		array[i, 76] = max_p(norm_mat)
		array[i, 77] = sum_average(norm_mat)
		array[i, 78] = sum_entropy(norm_mat)
		array[i, 79] = sum_squares(norm_mat)
		array[i, 80] = sum_variance(norm_mat)
		print("Haralick features extraction completed\n")
		println("Feature extraction of image $(i): finished\n")
		print("----------------------------------------------\n")
	end
	CSV.write("C:/Users/metri/Desktop/Julia/mayo_features_2.csv", Tables.table(array), writeheader=false)
	println("$(n_samples) images were succesfully processed")
end
